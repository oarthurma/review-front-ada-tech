#!/bin/bash

echo "üöÄ Criando exerc√≠cios de Estruturas Condicionais na Aula-07..."

# Criar pasta de exerc√≠cios se n√£o existir
mkdir -p exercicios

# Fun√ß√£o para criar exerc√≠cio
criar_exercicio() {
    local numero=$1
    local nome=$2
    local conteudo=$3
    
    cat > "exercicios/ex$numero-$nome.js" << CONTENT
$conteudo
CONTENT
}

# --- EXERC√çCIOS INICIANTE ---
criar_exercicio "01" "verificador-maioridade" '/*
üü¢ N√≠vel Iniciante - Exerc√≠cio 1: Verificador de Maioridade
Crie um programa que verifique se uma pessoa √© maior de idade (18 anos ou mais).

Requisitos:
- Declare uma constante idade com um valor num√©rico
- Use if/else para verificar se a idade √© >= 18
- Exiba "Maior de idade" ou "Menor de idade"

Exemplo de sa√≠da esperada:
Maior de idade

Dica: Use o operador de compara√ß√£o `>=` para verificar se a idade √© maior ou igual a 18.
*/'

criar_exercicio "02" "classificador-numeros" '/*
üü¢ N√≠vel Iniciante - Exerc√≠cio 2: Classificador de N√∫meros
Crie um programa que verifique se um n√∫mero √© positivo, negativo ou zero.

Requisitos:
- Declare uma constante `numero` com um valor num√©rico
- Use `if`, `else if` e `else` para classificar o n√∫mero
- Exiba "Positivo", "Negativo" ou "Zero"

Exemplo de sa√≠da esperada:
Positivo

Dica: Teste primeiro se √© zero (`===`), depois se √© maior que zero (`>`), e use `else` para negativo.
*/'

criar_exercicio "03" "comparador-dois-numeros" '/*
üü¢ N√≠vel Iniciante - Exerc√≠cio 3: Comparador de Dois N√∫meros
Crie um programa que compare dois n√∫meros e diga qual √© o maior ou se s√£o iguais.

Requisitos:
- Declare duas constantes `numero1` e `numero2`
- Use `if/else if/else` para comparar os valores
- Exiba qual n√∫mero √© maior ou se s√£o iguais

Exemplo de sa√≠da esperada:
O n√∫mero 15 √© maior que 10

Dica: Use os operadores `>`, `<` e `===` para fazer as compara√ß√µes.
*/'

criar_exercicio "04" "verificador-par-impar" '/*
üü¢ N√≠vel Iniciante - Exerc√≠cio 4: Verificador de Par ou √çmpar
Crie um programa que verifique se um n√∫mero √© par ou √≠mpar.

Requisitos:
- Declare uma constante `numero` com um valor inteiro
- Use o operador m√≥dulo (`%`) para verificar o resto da divis√£o por 2
- Use `if/else` para exibir "Par" ou "√çmpar"

Exemplo de sa√≠da esperada:
O n√∫mero 8 √© par

Dica: Um n√∫mero √© par quando `numero % 2 === 0`.
*/'

criar_exercicio "05" "verificador-idade-votacao" '/*
üü¢ N√≠vel Iniciante - Exerc√≠cio 5: Verificador de Idade para Vota√ß√£o
Crie um programa que verifique se uma pessoa pode votar (16 anos ou mais no Brasil).

Requisitos:
- Declare uma constante `idade`
- Use `if/else` para verificar se idade >= 16
- Exiba "Pode votar" ou "N√£o pode votar"

Exemplo de sa√≠da esperada:
Pode votar

Dica: A idade m√≠nima para votar no Brasil √© 16 anos.
*/'

criar_exercicio "06" "operador-logico-not" '/*
üü¢ N√≠vel Iniciante - Exerc√≠cio 6: Operador L√≥gico NOT (!)
Crie um programa que use o operador de nega√ß√£o `!` para inverter uma condi√ß√£o booleana.

Requisitos:
- Declare uma constante `estaLogado = false`
- Use `if (!estaLogado)` para verificar se N√ÉO est√° logado
- Exiba "Fa√ßa login para continuar" ou "Bem-vindo!"

Exemplo de sa√≠da esperada:
Fa√ßa login para continuar

Dica: O operador `!` inverte o valor booleana: `!false` vira `true`.
*/'

criar_exercicio "07" "verificador-desconto" '/*
üü¢ N√≠vel Iniciante - Exerc√≠cio 7: Verificador de Desconto
Crie um programa que verifique se um cliente tem direito a desconto (compras acima de R$ 100).

Requisitos:
- Declare uma constante `valorCompra`
- Use `if/else` para verificar se o valor √© maior que 100
- Exiba "Voc√™ tem desconto de 10%" ou "Sem desconto"

Exemplo de sa√≠da esperada:
Voc√™ tem desconto de 10%

Dica: Use o operador `>` para comparar o valor da compra com 100.
*/'

# --- EXERC√çCIOS INTERMEDI√ÅRIO ---
criar_exercicio "08" "classificador-notas" '/*
üü° N√≠vel Intermedi√°rio - Exerc√≠cio 8: Classificador de Notas
Crie um programa que classifique a nota de um aluno em conceitos: A, B, C, D ou F.

Requisitos:
- Declare uma constante `nota` (0 a 10)
- Use `if/else if/else` para classificar:
  - A: nota >= 9
  - B: nota >= 7
  - C: nota >= 5
  - D: nota >= 3
  - F: nota < 3
- Exiba o conceito correspondente

Exemplo de sa√≠da esperada:
Conceito: B

Dica: Comece testando as notas maiores primeiro (>= 9, >= 7, etc).
*/'

criar_exercicio "09" "operador-logico-e" '/*
üü° N√≠vel Intermedi√°rio - Exerc√≠cio 9: Operador L√≥gico E (&&)
Crie um programa que verifique se uma pessoa pode dirigir (idade >= 18 E possui CNH).

Requisitos:
- Declare `idade` e `possuiCNH` (boolean)
- Use `if` com operador `&&` para verificar ambas as condi√ß√µes
- Exiba "Pode dirigir" ou "N√£o pode dirigir"

Exemplo de sa√≠da esperada:
Pode dirigir

Dica: Use `if (idade >= 18 && possuiCNH)` - ambas as condi√ß√µes devem ser verdadeiras.
*/'

criar_exercicio "10" "operador-logico-ou" '/*
üü° N√≠vel Intermedi√°rio - Exerc√≠cio 10: Operador L√≥gico OU (||)
Crie um programa que verifique se √© final de semana (s√°bado OU domingo).

Requisitos:
- Declare uma constante `dia` com o nome do dia da semana
- Use `if` com operador `||` para verificar se √© "s√°bado" ou "domingo"
- Exiba "Final de semana!" ou "Dia de semana"

Exemplo de sa√≠da esperada:
Final de semana!

Dica: Use `if (dia === "s√°bado" || dia === "domingo")` - basta uma condi√ß√£o ser verdadeira.
*/'

criar_exercicio "11" "calculadora-imc-classificacao" '/*
üü° N√≠vel Intermedi√°rio - Exerc√≠cio 11: Calculadora de IMC com Classifica√ß√£o
Crie um programa que calcule o IMC e classifique o resultado.

Requisitos:
- Declare `peso` e `altura`
- Calcule o IMC: `peso / (altura * altura)`
- Use `if/else if/else` para classificar:
  - Abaixo do peso: IMC < 18.5
  - Peso normal: IMC < 25
  - Sobrepeso: IMC < 30
  - Obesidade: IMC >= 30
- Exiba o IMC e a classifica√ß√£o

Exemplo de sa√≠da esperada:
IMC: 22.5 - Peso normal

Dica: Use `Math.pow(altura, 2)` ou `altura * altura` para calcular altura ao quadrado.
*/'

criar_exercicio "12" "verificador-triangulo" '/*
üü° N√≠vel Intermedi√°rio - Exerc√≠cio 12: Verificador de Tri√¢ngulo
Crie um programa que verifique se tr√™s valores podem formar um tri√¢ngulo.

Requisitos:
- Declare tr√™s constantes: `lado1`, `lado2`, `lado3`
- Um tri√¢ngulo √© v√°lido quando: cada lado √© menor que a soma dos outros dois
- Use operador `&&` para verificar todas as condi√ß√µes
- Exiba "Forma um tri√¢ngulo" ou "N√£o forma um tri√¢ngulo"

Exemplo de sa√≠da esperada:
Forma um tri√¢ngulo

Dica: Verifique: `(lado1 < lado2 + lado3) && (lado2 < lado1 + lado3) && (lado3 < lado1 + lado2)`.
*/'

criar_exercicio "13" "sistema-login-simples" '/*
üü° N√≠vel Intermedi√°rio - Exerc√≠cio 13: Sistema de Login Simples
Crie um programa que simule um sistema de login com usu√°rio e senha.

Requisitos:
- Declare `usuario` e `senha` (strings)
- Declare valores corretos: `usuarioCorreto = "admin"` e `senhaCorreta = "123456"`
- Use operador `&&` para verificar se ambos est√£o corretos
- Exiba "Login realizado com sucesso!" ou "Usu√°rio ou senha incorretos"

Exemplo de sa√≠da esperada:
Login realizado com sucesso!

Dica: Use `if (usuario === usuarioCorreto && senha === senhaCorreta)`.
*/'

criar_exercicio "14" "verificador-ano-bissexto" '/*
üü° N√≠vel Intermedi√°rio - Exerc√≠cio 14: Verificador de Ano Bissexto
Crie um programa que verifique se um ano √© bissexto.

Requisitos:
- Declare uma constante `ano`
- Um ano √© bissexto se:
  - √â divis√≠vel por 4 E n√£o √© divis√≠vel por 100
  - OU √© divis√≠vel por 400
- Use operadores `&&` e `||` combinados
- Exiba "Ano bissexto" ou "N√£o √© bissexto"

Exemplo de sa√≠da esperada:
Ano bissexto

Dica: Use: `((ano % 4 === 0 && ano % 100 !== 0) || ano % 400 === 0)`.
*/'

# --- EXERC√çCIOS AVAN√áADO ---
criar_exercicio "15" "calculadora-desconto-progressivo" '/*
üî¥ N√≠vel Avan√ßado - Exerc√≠cio 15: Calculadora de Desconto Progressivo
Crie um programa que calcule descontos progressivos baseados no valor da compra e tipo de cliente.

Requisitos:
- Declare `valorCompra` e `tipoCliente` ("regular", "vip", "premium")
- Aplique descontos:
  - Regular: 5% se compra > 100, 10% se > 500
  - VIP: 10% se compra > 100, 15% se > 500
  - Premium: 15% se compra > 100, 20% se > 500
- Use condicionais aninhadas
- Exiba o valor original, desconto aplicado e valor final

Exemplo de sa√≠da esperada:
Valor original: R$ 600.00
Desconto (VIP 15%): R$ 90.00
Valor final: R$ 510.00

Dica: Use um `if` externo para verificar o tipo de cliente e `if` internos para os valores.
*/'

criar_exercicio "16" "classificador-faixa-etaria" '/*
üî¥ N√≠vel Avan√ßado - Exerc√≠cio 16: Classificador de Faixa Et√°ria Detalhado
Crie um programa que classifique uma pessoa em categorias et√°rias detalhadas.

Requisitos:
- Declare uma constante `idade`
- Classifique em:
  - Beb√™: 0-2 anos
  - Crian√ßa: 3-12 anos
  - Adolescente: 13-17 anos
  - Adulto jovem: 18-29 anos
  - Adulto: 30-59 anos
  - Idoso: 60+ anos
- Use `if/else if/else` encadeado
- Exiba a classifica√ß√£o

Exemplo de sa√≠da esperada:
Classifica√ß√£o: Adulto jovem (18-29 anos)

Dica: Use compara√ß√µes com `>=` e `<=` para definir as faixas: `if (idade >= 0 && idade <= 2)`.
*/'

criar_exercicio "17" "validador-senha-forte" '/*
üî¥ N√≠vel Avan√ßado - Exerc√≠cio 17: Validador de Senha Forte
Crie um programa que valide se uma senha √© forte baseado em m√∫ltiplos crit√©rios.

Requisitos:
- Declare uma constante `senha` (string)
- Declare vari√°veis booleanas para cada crit√©rio:
  - `temMaiuscula`: possui letra mai√∫scula
  - `temMinuscula`: possui letra min√∫scula
  - `temNumero`: possui n√∫mero
  - `tamanhoAdequado`: possui 8 ou mais caracteres
- Use operador `&&` para verificar se TODOS os crit√©rios s√£o atendidos
- Exiba "Senha forte" ou liste os crit√©rios n√£o atendidos

Exemplo de sa√≠da esperada:
Senha forte: todos os crit√©rios atendidos!

Dica: Para este exerc√≠cio, simule os valores booleanos manualmente. Ex: `const temMaiuscula = true;`.
*/'

criar_exercicio "18" "sistema-aprovacao-emprestimo" '/*
üî¥ N√≠vel Avan√ßado - Exerc√≠cio 18: Sistema de Aprova√ß√£o de Empr√©stimo
Crie um programa que aprove ou negue um empr√©stimo baseado em m√∫ltiplos crit√©rios.

Requisitos:
- Declare: `renda`, `idade`, `temHistoricoCredito` (boolean), `valorEmprestimo`
- Crit√©rios para aprova√ß√£o:
  - Renda >= R$ 2000
  - Idade entre 21 e 65 anos
  - Tem hist√≥rico de cr√©dito positivo
  - Valor do empr√©stimo <= 30% da renda anual
- Use operadores `&&` e condicionais aninhadas
- Exiba "Empr√©stimo aprovado" ou o motivo da nega√ß√£o

Exemplo de sa√≠da esperada:
Empr√©stimo aprovado! Valor liberado: R$ 10.000,00

Dica: Calcule a renda anual: `renda * 12`, depois verifique se `valorEmprestimo <= rendaAnual * 0.3`.
*/'

criar_exercicio "19" "conversor-notas-validacao" '/*
üî¥ N√≠vel Avan√ßado - Exerc√≠cio 19: Conversor de Notas com Valida√ß√£o
Crie um programa que converta notas num√©ricas para conceitos com valida√ß√µes completas.

Requisitos:
- Declare uma constante `nota`
- Valide se a nota est√° entre 0 e 10
- Se v√°lida, converta para conceito (A, B, C, D, F)
- Se inv√°lida, exiba mensagem de erro
- Use condicionais aninhadas: primeiro valida, depois converte
- Exiba o conceito ou mensagem de erro apropriada

Exemplo de sa√≠da esperada:
Nota v√°lida: 8.5
Conceito: B

Dica: Use `if (nota >= 0 && nota <= 10)` para validar antes de classificar.
*/'

criar_exercicio "20" "sistema-prioridade-atendimento" '/*
üî¥ N√≠vel Avan√ßado - Exerc√≠cio 20: Sistema de Prioridade de Atendimento
Crie um programa que determine a prioridade de atendimento em um hospital.

Requisitos:
- Declare: `idade`, `gestante` (boolean), `deficiente` (boolean), `gravidadeQuadro` (1-5)
- Determine prioridade:
  - Urg√™ncia m√°xima: gravidadeQuadro >= 4
  - Prioridade especial: idade >= 60 OU gestante OU deficiente
  - Prioridade infantil: idade < 12
  - Normal: demais casos
- Use m√∫ltiplas condi√ß√µes combinadas com `&&` e `||`
- Exiba a categoria de prioridade e tempo estimado

Exemplo de sa√≠da esperada:
Prioridade: URG√äNCIA M√ÅXIMA
Atendimento imediato

Dica: Verifique primeiro as prioridades mais altas (urg√™ncia) e v√° descendo at√© o caso normal.
*/'

criar_exercicio "21" "calculadora-imposto-renda" '/*
üî¥ N√≠vel Avan√ßado - Exerc√≠cio 21: Calculadora de Imposto de Renda Progressivo
Crie um programa que calcule o imposto de renda baseado em faixas progressivas.

Requisitos:
- Declare uma constante `salario`
- Aplique al√≠quotas progressivas:
  - At√© R$ 1.903,98: isento
  - R$ 1.903,99 a R$ 2.826,65: 7,5%
  - R$ 2.826,66 a R$ 3.751,05: 15%
  - R$ 3.751,06 a R$ 4.664,68: 22,5%
  - Acima: 27,5%
- Use `if/else if/else` encadeado
- Calcule o imposto e exiba sal√°rio bruto, imposto e sal√°rio l√≠quido

Exemplo de sa√≠da esperada:
Sal√°rio bruto: R$ 5.000,00
Imposto (27,5%): R$ 1.375,00
Sal√°rio l√≠quido: R$ 3.625,00

Dica: Comece verificando as faixas de baixo para cima: if (salario <= 1903.98).
*/'

echo "‚úÖ Estrutura de Estruturas Condicionais criada com SUCESSO na Aula-07!"
echo ""
echo "üìä RESUMO:"
echo "   üìÅ exercicios/          - 21 arquivos para desenvolver"
echo "   üü¢ N√≠vel Iniciante:     - 7 exerc√≠cios (if/else b√°sico)"
echo "   üü° N√≠vel Intermedi√°rio: - 7 exerc√≠cios (operadores l√≥gicos)"  
echo "   üî¥ N√≠vel Avan√ßado:      - 7 exerc√≠cios (condicionais complexas)"
echo ""
echo "üöÄ COMANDOS √öTEIS:"
echo "   node exercicios/ex01-verificador-maioridade.js    # Testar exerc√≠cio"
echo "   code exercicios/ex01-verificador-maioridade.js    # Editar exerc√≠cio"
